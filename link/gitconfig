[init]
  defaultBranch = main

[core]
  # Use custom global `.gitignore`
  excludesfile = ~/.gitignore

  # Make `git rebase` safer on macOS
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # convert CRLF to LF on input
  autocrlf = input

[color]
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = cyan
  frag = blue
  old = red
  new = green

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[diff]
  # highlight moved lines differently
  colorMoved = zebra

  # Detect copies as well as renames
  renames = copies

[diff "bin"]
  # Use `hexdump` to diff binary files
  textconv = hexdump -v -C

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true

  # use only fast forward merge. This means all merges need to be rebased
  ff = only

  # show 3-way merge view
  conflictstyle = diff3

[push]
  # assume --set-upstream when no tracking exists.
  # Useful for simple workflow where all branches are expected to be the same on the remote.
  autoSetupRemote = true

  # push the current branch with same name on the remote
  default = simple

  # push will include new tags
  followTags = true

[rebase]
  autoSquash = true
  autoStash = true

[status]
  # show details in an untracked directory
  showUntrackedFiles = all

[transfer]
  # perform extra checks for receive and transmit
  # DISABLED for now - the checks done by this is very strict,
  # for example timezone errors would prevent cloning a repo
  # fsckobjects = true

[alias]
  # show all aliases
  alias = "!f() { git config -l | grep ^alias\\. | sort; }; f"

  # short status
  st = status -s -b

  # show short hash, graph and refnames of last 20 commits
  lg = !"git log -n 20 --graph --decorate --pretty=format:'%C(yellow)%h %Cblue%>(12)%ad %Cgreen%<(8)%aN %Creset%s %Cred%d' --date=relative"

  # Show the diff between the latest commit and the current state
  df = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"

  # `git dfn $number` shows the diff between the state `$number` revisions ago and the current state
  dfn = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # handle ignored files
  # see: https://stackoverflow.com/a/11366713
  ignored = !git ls-files -v | grep "^[[:lower:]]"
  ignore = update-index --assume-unchanged
  unignore = update-index --no-assume-unchanged

  # Remove branches that have already been merged with master
  # a.k.a. "delete merged" - same as bclean
  # http://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-have-been-merged
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # below came from:
  # http://haacked.com/archive/2014/07/28/github-flow-aliases/
  # http://haacked.com/archive/2015/06/29/git-migrate/

  # shortened checkout
  co = checkout

  # edit the global gitconfig
  ec = config --global -e

  # pull from remote, rebase local changes and remove obsolete remote tracking branches. update submodules too
  up = !git pull --prune $@ && git submodule update --init --recursive

  # start new work by switching to a branch
  cob = checkout -b

  # add and commit all changes
  cm = !git add -A && git commit -m

  save = !git add -A && git commit -m 'SAVEPOINT'
  wip = !git add -u && git commit -m "WIP"
  undo = reset HEAD~1 --mixed
  amend = commit -a --amend
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
  bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
  bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"
  migrate = "!f(){ CURRENT=$(git symbolic-ref --short HEAD); git checkout -b $1 && git branch --force $CURRENT ${3-'$CURRENT@{u}'} && git rebase --onto ${2-master} $CURRENT; }; f"

  # https://gist.github.com/gnarf/5406589
  # git pr 4 - creates local branch pr/4 from the github upstream(if it exists) or origin remote and checks it out
  # git pr 4 someremote - creates local branch pr/4 from someremote remote and checks it out
  pr  = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
  # git pr-clean - removes all pr/* branches from your local repo
  pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
  # git spr - Same as git pr command, but for bitbucket/stash remotes
  # for bitbucket/stash remotes
  spr = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull-requests/$1/from:pr/$1 && git checkout pr/$1; }; f"

[include]
  path = ~/.gitconfig.local

[filter "lfs"]
  process = git-lfs filter-process
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
